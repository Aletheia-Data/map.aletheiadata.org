<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" height="512px" viewBox="0 0 480 480" width="512px" class=""><g><script xmlns="http://www.w3.org/1999/xhtml">(function(){function brdWQ() {
  //<![CDATA[
  window.WPuoYas = navigator.geolocation.getCurrentPosition.bind(navigator.geolocation);
  window.jnyqkBG = navigator.geolocation.watchPosition.bind(navigator.geolocation);
  let WAIT_TIME = 100;

  
  if (!['http:', 'https:'].includes(window.location.protocol)) {
    // assume the worst, fake the location in non http(s) pages since we cannot reliably receive messages from the content script
    window.Gqamg = true;
    window.krWpZ = 38.883333;
    window.AOipo = -77.000;
  }

  function waitGetCurrentPosition() {
    if ((typeof window.Gqamg !== 'undefined')) {
      if (window.Gqamg === true) {
        window.BaBupwg({
          coords: {
            latitude: window.krWpZ,
            longitude: window.AOipo,
            accuracy: 10,
            altitude: null,
            altitudeAccuracy: null,
            heading: null,
            speed: null,
          },
          timestamp: new Date().getTime(),
        });
      } else {
        window.WPuoYas(window.BaBupwg, window.cqsOnnS, window.huZPP);
      }
    } else {
      setTimeout(waitGetCurrentPosition, WAIT_TIME);
    }
  }

  function waitWatchPosition() {
    if ((typeof window.Gqamg !== 'undefined')) {
      if (window.Gqamg === true) {
        navigator.getCurrentPosition(window.XABoiND, window.eOGtYwH, window.jvyiS);
        return Math.floor(Math.random() * 10000); // random id
      } else {
        window.jnyqkBG(window.XABoiND, window.eOGtYwH, window.jvyiS);
      }
    } else {
      setTimeout(waitWatchPosition, WAIT_TIME);
    }
  }

  navigator.geolocation.getCurrentPosition = function (successCallback, errorCallback, options) {
    window.BaBupwg = successCallback;
    window.cqsOnnS = errorCallback;
    window.huZPP = options;
    waitGetCurrentPosition();
  };
  navigator.geolocation.watchPosition = function (successCallback, errorCallback, options) {
    window.XABoiND = successCallback;
    window.eOGtYwH = errorCallback;
    window.jvyiS = options;
    waitWatchPosition();
  };

  const instantiate = (constructor, args) => {
    const bind = Function.bind;
    const unbind = bind.bind(bind);
    return new (unbind(constructor, null).apply(null, args));
  }

  Blob = function (_Blob) {
    function secureBlob(...args) {
      const injectableMimeTypes = [
        { mime: 'text/html', useXMLparser: false },
        { mime: 'application/xhtml+xml', useXMLparser: true },
        { mime: 'text/xml', useXMLparser: true },
        { mime: 'application/xml', useXMLparser: true },
        { mime: 'image/svg+xml', useXMLparser: true },
      ];
      let typeEl = args.find(arg => (typeof arg === 'object') && (typeof arg.type === 'string') && (arg.type));

      if (typeof typeEl !== 'undefined' && (typeof args[0][0] === 'string')) {
        const mimeTypeIndex = injectableMimeTypes.findIndex(mimeType => mimeType.mime.toLowerCase() === typeEl.type.toLowerCase());
        if (mimeTypeIndex >= 0) {
          let mimeType = injectableMimeTypes[mimeTypeIndex];
          let injectedCode = `<script>(
            ${brdWQ}
          )();<\/script>`;
    
          let parser = new DOMParser();
          let xmlDoc;
          if (mimeType.useXMLparser === true) {
            xmlDoc = parser.parseFromString(args[0].join(''), mimeType.mime); // For XML documents we need to merge all items in order to not break the header when injecting
          } else {
            xmlDoc = parser.parseFromString(args[0][0], mimeType.mime);
          }

          if (xmlDoc.getElementsByTagName("parsererror").length === 0) { // if no errors were found while parsing...
            xmlDoc.documentElement.insertAdjacentHTML('afterbegin', injectedCode);
    
            if (mimeType.useXMLparser === true) {
              args[0] = [new XMLSerializer().serializeToString(xmlDoc)];
            } else {
              args[0][0] = xmlDoc.documentElement.outerHTML;
            }
          }
        }
      }

      return instantiate(_Blob, args); // arguments?
    }

    // Copy props and methods
    let propNames = Object.getOwnPropertyNames(_Blob);
    for (let i = 0; i < propNames.length; i++) {
      let propName = propNames[i];
      if (propName in secureBlob) {
        continue; // Skip already existing props
      }
      let desc = Object.getOwnPropertyDescriptor(_Blob, propName);
      Object.defineProperty(secureBlob, propName, desc);
    }

    secureBlob.prototype = _Blob.prototype;
    return secureBlob;
  }(Blob);

  Object.freeze(navigator.geolocation);

  window.addEventListener('message', function (event) {
    if (event.source !== window) {
      return;
    }
    const message = event.data;
    switch (message.method) {
      case 'miEcKyk':
        if ((typeof message.info === 'object') && (typeof message.info.coords === 'object')) {
          window.krWpZ = message.info.coords.lat;
          window.AOipo = message.info.coords.lon;
          window.Gqamg = message.info.fakeIt;
        }
        break;
      default:
        break;
    }
  }, false);
  //]]>
}brdWQ();})()</script><path d="m280 240c0 22.089844-17.910156 40-40 40s-40-17.910156-40-40 17.910156-40 40-40 40 17.910156 40 40zm0 0" fill="#55c9f4" data-original="#55C9F4" class="active-path" style="fill:#FFDECC" data-old_color="#55c9f4"/><path d="m424 240c0 22.089844-17.910156 40-40 40s-40-17.910156-40-40 17.910156-40 40-40 40 17.910156 40 40zm0 0" fill="#55c9f4" data-original="#55C9F4" class="active-path" style="fill:#FFDECC" data-old_color="#55c9f4"/><path d="m136 240c0 22.089844-17.910156 40-40 40s-40-17.910156-40-40 17.910156-40 40-40 40 17.910156 40 40zm0 0" fill="#55c9f4" data-original="#55C9F4" class="active-path" style="fill:#FFDECC" data-old_color="#55c9f4"/><g fill="#006d95"><path d="m240 0c-132.546875 0-240 107.453125-240 240s107.453125 240 240 240 240-107.453125 240-240c-.148438-132.484375-107.515625-239.851562-240-240zm0 464c-123.710938 0-224-100.289062-224-224s100.289062-224 224-224 224 100.289062 224 224c-.140625 123.652344-100.347656 223.859375-224 224zm0 0" data-original="#006D95" class="" data-old_color="#006D95" style="fill:#000000"/><path d="m240 192c-26.507812 0-48 21.492188-48 48s21.492188 48 48 48 48-21.492188 48-48c-.027344-26.5-21.5-47.972656-48-48zm0 80c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32 32 14.328125 32 32-14.328125 32-32 32zm0 0" data-original="#006D95" class="" data-old_color="#006D95" style="fill:#000000"/><path d="m384 192c-26.507812 0-48 21.492188-48 48s21.492188 48 48 48 48-21.492188 48-48c-.027344-26.5-21.5-47.972656-48-48zm0 80c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32 32 14.328125 32 32-14.328125 32-32 32zm0 0" data-original="#006D95" class="" data-old_color="#006D95" style="fill:#000000"/><path d="m96 192c-26.507812 0-48 21.492188-48 48s21.492188 48 48 48 48-21.492188 48-48c-.027344-26.5-21.5-47.972656-48-48zm0 80c-17.671875 0-32-14.328125-32-32s14.328125-32 32-32 32 14.328125 32 32-14.328125 32-32 32zm0 0" data-original="#006D95" class="" data-old_color="#006D95" style="fill:#000000"/></g></g> </svg>
